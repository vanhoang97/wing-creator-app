// File: src/WingCreatorApp.jsx
import { useState } from "react";
import { Card, CardContent } from "./components/ui/card";
import { Button } from "./components/ui/button";
import { Input } from "./components/ui/input";
import { Textarea } from "./components/ui/textarea";

export default function WingCreatorApp() {
  const [step, setStep] = useState(1);
  const [answers, setAnswers] = useState([]);
  const [currentQ, setCurrentQ] = useState(0);
  const [inputValue, setInputValue] = useState("");
  const [ideas, setIdeas] = useState([]);
  const [script, setScript] = useState("");

  const questions = [
    "1Ô∏è‚É£ B·∫°n ƒëang l√†m trong lƒ©nh v·ª±c n√†o v√† mu·ªën t·∫°o n·ªôi dung cho ƒëi·ªÅu g√¨?",
    "2Ô∏è‚É£ B·∫°n k·ª≥ v·ªçng n·ªôi dung n√†y gi√∫p b·∫°n ƒë·∫°t ƒë∆∞·ª£c ƒëi·ªÅu g√¨?",
    "3Ô∏è‚É£ Kh√°ch h√†ng ho·∫∑c ng∆∞·ªùi xem c·ªßa b·∫°n l√† ai?",
    "4Ô∏è‚É£ B·∫°n mu·ªën n·ªôi dung mang phong c√°ch nh∆∞ th·∫ø n√†o?",
    "5Ô∏è‚É£ B·∫°n mu·ªën m√¨nh (GPT) ƒë√≥ng vai tr√≤ g√¨ trong qu√° tr√¨nh s√°ng t·∫°o?",
    "6Ô∏è‚É£ C√≥ ƒëi·ªÅu g√¨ b·∫°n KH√îNG mu·ªën th·∫•y trong n·ªôi dung kh√¥ng?",
    "7Ô∏è‚É£ N·∫øu n·ªôi dung mang y·∫øu t·ªë h√†i h∆∞·ªõc, b·∫°n th√≠ch ki·ªÉu h√†i nh∆∞ th·∫ø n√†o?",
    "8Ô∏è‚É£ B·∫°n ƒë·ªãnh ƒëƒÉng n·ªôi dung n√†y l√™n n·ªÅn t·∫£ng n√†o?"
  ];

  const handleNext = () => {
    if (!inputValue.trim()) return;
    const updated = [...answers];
    updated[currentQ] = inputValue;
    setAnswers(updated);
    setInputValue("");

    if (currentQ < questions.length - 1) {
      setCurrentQ(currentQ + 1);
    } else {
      generateIdeas(updated);
      setStep(2);
    }
  };

  const generateIdeas = (answers) => {
    const [field, goal, audience, tone, role, avoid, humor, platform] = answers;
    const base = `${field} | ${goal} | ${audience} | ${tone} | ${humor}`;
    const generated = Array.from({ length: 30 }, (_, i) => `${i + 1}. ${tone.toUpperCase()}: ${base}`);
    setIdeas(generated);
  };

  const generateScript = (idea) => {
    const [field, goal, audience, tone, role, avoid, humor, platform] = answers;
    const base = `B·ªëi c·∫£nh: ${field} ‚Äì kh√°ch ${audience} b∆∞·ªõc v√†o\n\n3s ƒë·∫ßu: N·ªôi dung m·ªü ƒë·∫ßu tone ${tone}\nGi·ªØa video: Nh·∫•n m·∫°nh ${goal}\nCu·ªëi video: Call to action nh·∫π ph√π h·ª£p v·ªõi ${platform}`;
    setScript(`üé¨ √ù t∆∞·ªüng: ${idea}\n\n${base}`);
    setStep(3);
  };

  return (
    <div className="p-6 space-y-6 max-w-2xl mx-auto">
      {step === 1 && (
        <Card className="bg-gray-50">
          <CardContent className="space-y-4 p-6">
            <h2 className="text-xl font-semibold mb-2">ü§ù Tr√≤ chuy·ªán c√πng WingGPT</h2>
            <div className="space-y-2 max-h-[300px] overflow-y-auto">
              {answers.map((ans, idx) => (
                <div key={idx} className="flex flex-col items-end">
                  <div className="bg-blue-600 text-white px-4 py-2 rounded-xl max-w-[80%] text-sm">
                    {ans}
                  </div>
                  <div className="text-xs text-gray-400 mt-1">B·∫°n</div>
                  <div className="bg-gray-200 text-gray-800 px-4 py-2 rounded-xl max-w-[80%] mt-2 text-sm self-start">
                    {questions[idx]}
                  </div>
                  <div className="text-xs text-gray-400 ml-1 mb-2">WingGPT</div>
                </div>
              ))}
              {currentQ < questions.length && (
                <div className="bg-gray-200 text-gray-800 px-4 py-2 rounded-xl max-w-[80%] text-sm self-start">
                  {questions[currentQ]}
                </div>
              )}
            </div>
            <div className="flex gap-2">
              <Input
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="Nh·∫≠p c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n..."
                className="flex-1"
              />
              <Button onClick={handleNext}>G·ª≠i</Button>
            </div>
            <div className="text-sm text-gray-500 text-right">
              C√¢u {currentQ + 1}/{questions.length}
            </div>
          </CardContent>
        </Card>
      )}

      {step === 2 && (
        <Card>
          <CardContent className="space-y-4 p-6">
            <h2 className="text-xl font-semibold">üí° Ch·ªçn m·ªôt √Ω t∆∞·ªüng</h2>
            {ideas.map((idea, idx) => (
              <Button
                key={idx}
                variant="outline"
                className="w-full justify-start"
                onClick={() => generateScript(idea)}
              >
                {idea}
              </Button>
            ))}
            <Button variant="ghost" onClick={() => setStep(1)}>üîÑ Quay l·∫°i ph·∫ßn gi·ªõi thi·ªáu</Button>
          </CardContent>
        </Card>
      )}

      {step === 3 && (
        <Card>
          <CardContent className="space-y-4 p-6">
            <h2 className="text-xl font-semibold">üìú K·ªãch b·∫£n ho√†n ch·ªânh</h2>
            <Textarea rows={10} value={script} readOnly />
            <Button variant="ghost" onClick={() => setStep(2)}>üîÅ Ch·ªçn √Ω t∆∞·ªüng kh√°c</Button>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
